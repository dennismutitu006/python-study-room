'''
script demonstrates how to use asynchronous iteration with a generator
function and an asynchronous list comprehension to filter out odd numbers.
what you want to do is call another async def func instead of
calling range directly.
'''

import asyncio


async def numbers(numbers):
    for i in range(numbers):
        yield i
        await asyncio.sleep(0.5) #Asynchronously sleeps for 0.5 sec b4 the nxt iteration

async def main():
    ''' Iterates over the numbers generated by the numbers asynchronous generator.
    Filters the numbers, including only those that are odd (i.e.,
    where the remainder of i divided by 2 is 1).
    '''
    odd_numbers = [i async for i in numbers(10) if i % 2]
    print(odd_numbers)

if __name__ = '__main__':
    event_loop = asyncio.get_event_loop() #  gets the default event loop
    try:
        event_loop.run_until_complete(main())#runs the 'main' coroutine till completion
    finally:
        event_loop.close() #closes the event loop to free up resources 

#technicaly numbers function is an async generator that is yielding values to our async
#list comprehension.
